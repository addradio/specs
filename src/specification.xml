<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2.0//EN" "http://docbook.org/xml/4.2/docbookx.dtd">

<book xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Technical specification for interfacing with the AddRadio network</title>
    <chapter>
        <title>General communication with Icecast2</title>
        <para>Communication with Icecast2 is based on HTTP. Icecast2 implements HTTP/1.0 with a set of features from HTTP/1.1 and some usecase specific extensions. In addition Icecast2 may support other protocols such as ICY.</para>
        <section>
            <title>Protocol Specification</title>
            <para>All Icecast2 clients connect to Icecast2 using the same server address. Mountpoints and general web access uses administrator provided resource names. The administration interface and API is available below the resource prefix "/admin".</para>
            <para>Icecast2 implements HTTP/1.0. It understands most HTTP/1.1 requests. If interpretation of a request fails Icecast2 will send a HTTP/1.0 error reply depending on the reason of failure. If Icecast2 can not assume a HTTP client or the error occurs in early stages of client handling Icecast2 may drop the connection without sending data to the client.</para>
            <section>
                <title>Error codes</title>
                <para>The server may respond with any <link xlink:href="https://tools.ietf.org/html/rfc7231#section-6">RFC 7231 Section 6</link> status code. Below is a incomplete list of important status codes:
                    <table>
                        <thead>
                            <row>
                                <entry>Code</entry>
                                <entry>Text</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>100</entry>
                                <entry>Continue</entry>
                                <entry>Is sent if client requested it by adding the corresponding header to its request: <code>Expect: 100-continue</code>. See also Section <emphasis>100-continue</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>101</entry>
                                <entry>Switching Protocols</entry>
                                <entry>This is sent by the server when the server performs a protocol switch as requested by the client. This may happen e.g. in <emphasis>RFC 2818 mode</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>200</entry>
                                <entry>OK</entry>
                                <entry>Sent after source client stopped</entry>
                            </row>
                            <row>
                                <entry>206</entry>
                                <entry>Partial Content</entry>
                                <entry>The server's replies with a range from a range request. See <link xlink:href="https://tools.ietf.org/html/rfc7233#section-4.1">RFC 7233 Section 4.1</link> for details.</entry>
                            </row>
                            <row>
                                <entry>400</entry>
                                <entry>Bad Request</entry>
                                <entry>The client sent a request that was not understood by the server.</entry>
                            </row>
                            <row>
                                <entry>401</entry>
                                <entry>Authentication Required</entry>
                                <entry>No or invalid authentication data was provided. See also Section <emphasis>Authentication</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>Content-type not supported</entry>
                                <entry>The supplied content type is not supported. See also Section <emphasis>Content Types</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>No Content-type given</entry>
                                <entry>Header field <code>Content-Type</code> was not set but is mandatory. See also Section <emphasis>Content Types</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>internal format allocation problem</entry>
                                <entry>There was a problem allocating the format handler. This is an internal Icecast2 problem.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>too many sources connected</entry>
                                <entry>The Icecast2 instance' source client limit was reached. No more source connections are allowed.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>Mountpoint in use</entry>
                                <entry>The client tried to connect to an occupied mountpoint. That means, another source client is connected already.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>busy, please try again later</entry>
                                <entry>The server is busy. The client should try again later.<footnote>This most likely indicates that the server is under heavy load or that backend servers do not keep up with requests from Icecast2. The client should not repeat the request too soon. A delay of at least a few seconds is strongly recommended.</footnote></entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>Icecast connection limit reached</entry>
                                <entry>A server's client limit is reached. The client can try again later.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>Reached limit of concurrent connections on those credentials</entry>
                                <entry>The server refuses the client's request as the user reached it's request limit. See <emphasis>Authentication</emphasis> for details.</entry>
                            </row>
                            <row>
                                <entry>403</entry>
                                <entry>Rejecting client for whatever reason</entry>
                                <entry>The server refused the client for internal reasons.</entry>
                            </row>
                            <row>
                                <entry>404</entry>
                                <entry>File Not Found</entry>
                                <entry>The requested resource was not found on the server.</entry>
                            </row>
                            <row>
                                <entry>416</entry>
                                <entry>Request Range Not Satisfiable</entry>
                                <entry>The range requested by the client is invalid or the resource can not provide the given range.</entry>
                            </row>
                            <row>
                                <entry>426</entry>
                                <entry>Upgrade Required</entry>
                                <entry>The request sent by the client can not be handled with the current protocol. The protocol must be switched. See also <emphasis>TLS</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>500</entry>
                                <entry>Internal Server Error</entry>
                                <entry>An internal Icecast server error occurred</entry>
                            </row>
                            <row>
                                <entry>501</entry>
                                <entry>Unimplemented</entry>
                                <entry>The request seems to be valid but uses an option that is unsupported by the server.</entry>
                            </row>
                        </tbody>
                    </table>
                </para>
            </section>
            <section>
                <title>Authentication</title>
                <para>Depending on operation and resource Icecast2 may require the client to authenticate. If such a resource is accessed in such a operation and no authentication data was sent along with the request Icecast2 will respond with the corresponding error status.</para>
                <para>Authentication is based on <link xlink:href="https://tools.ietf.org/html/rfc7617">RFC 7617</link>. The client must send a request with no authentication first. The server will include information in it's error response on how to provide authentication data correctly. This step may be skipped according to the rules in RFC 7617 only.</para>
                <para>The client must support the "Basic" authentication scheme.</para>
            </section>
            <section>
                <title>Transfer encodings</title>
                <para>Icecast2 supports different transfer encodings for sending data to Icecast2. A client is free to choice any of what is supported by the server. An application must consider what transfer encodings are announced by the server.</para>
                <para>The transfer encoding is announced by the server using the <code>Accept-Encoding</code> HTTP header.</para>
                <table>
                    <thead>
                        <row>
                            <entry>Encoding</entry>
                            <entry>min. Icecast2 version</entry>
                            <entry>Comment</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>identity</entry>
                            <entry>Icecast2 2.0.0</entry>
                            <entry>This is the safe fallback.</entry>
                        </row>
                        <row>
                            <entry>chunked</entry>
                            <entry>Icecast2 2.5.0-beta.1</entry>
                            <entry></entry>
                        </row>
                    </tbody>
                </table>
                <warning>Prior to Icecast2 2.5.0-beta.1 the server did not return error in case a unsupported transfer encoding was used by the client. Those servers only support the "identity" encoding.</warning>
                <note>RFC 7230 removed the "identity" encoding from the standard. See <link xlink:href="https://tools.ietf.org/html/rfc7230#appendix-A.2">RFC 7230 Appendix A.2</link> for details.</note>
                <tip>
                    <para>
                        When chunked is not used as outermost transfer encoding the client can half-close the connection to signal the end of the request if the transport supports half-closed connections.
                    </para>
                    <para>
                        On IEEE Std 1003.1 ("POSIX") systems this can be achieved calling <function>shutdown</function> with <constant>SHUT_WR</constant>.
                    </para>
                </tip>
            </section>

            <section>
                <title>Metadata</title>
                <para>Metadata is an important part of modern audio and video streaming. With Icecast2 metadata are transported as part of the transported datastream. All supported formats support metadata. Only for non-supported MP3 and AAC (and derivates) streams the ICY protocol must be used. This protocol is not part of this specification. For details see the corresponding documentation of the used streaming format. For ICY see the appendix in this document.</para>
            </section>
        </section>

        <section>
            <title>TLS</title>
            <para>Icecast2 has TLS support included. Available TLS versions and options depend on the actual deployment. The following modes are supported:
                <table>
                    <thead>
                        <row>
                            <entry>Mode</entry>
                            <entry>min. Icecast2 version</entry>
                            <entry>Comment</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>RFC 2817</entry>
                            <entry>Icecast2 2.3.2</entry>
                            <entry>HTTP over TLS</entry>
                        </row>
                        <row>
                            <entry>RFC 2818</entry>
                            <entry>Icecast2 2.5.0-beta.1</entry>
                            <entry>Upgrade to TLS within HTTP<footnote><para>This is similar to what other protocols call "STARTTLS".</para></footnote></entry>
                        </row>
                    </tbody>
                </table>
            </para>
            <note>Some older documentation may call TLS SSL.</note>
        </section>

        <section>
            <title>Content Types</title>
            <para>The following content types are support for streaming. Other content types my be used for non-streaming resources such as the administration interface and the API.</para>
            <table>
                <title>Mine Types</title>
                <thead>
                    <row>
                        <entry>Mime Type</entry>
                        <entry>Container</entry>
                        <entry>Codecs</entry>
                        <entry>min. Icecast2 version</entry>
                        <entry>Comment</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>application/x-ogg</entry>
                        <entry>Ogg</entry>
                        <entry><emphasis>See application/ogg</emphasis></entry>
                        <entry>Icecast2 2.0.0</entry>
                        <entry>For backwards compatibility only. Do not use in new applications.</entry>
                    </row>
                    <row>
                        <entry>application/ogg</entry>
                        <entry>Ogg</entry>
                        <entry>Vorbis, Opus, FLAC, Speex, MIDI, Theora, Kate, Skeleton</entry>
                        <entry>Icecast2 2.3.2</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>audio/ogg</entry>
                        <entry>Ogg</entry>
                        <entry>Vorbis, Opus, FLAC, Speex, MIDI, Skeleton</entry>
                        <entry>Icecast2 2.3.2</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>video/ogg</entry>
                        <entry>Ogg</entry>
                        <entry>Vorbis, Opus, FLAC, Speex, MIDI, Theora, Kate, Skeleton</entry>
                        <entry>Icecast2 2.3.2</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>audio/webm</entry>
                        <entry>WebM</entry>
                        <entry><emphasis>Any as per WebM specification</emphasis></entry>
                        <entry>Icecast2 2.4.0-beta.1</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>video/webm</entry>
                        <entry>WebM</entry>
                        <entry><emphasis>Any as per WebM specification</emphasis></entry>
                        <entry>Icecast2 2.4.0-beta.1</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>audio/x-matroska</entry>
                        <entry>Matroska</entry>
                        <entry><emphasis>Any as per Matroska specification</emphasis></entry>
                        <entry>Icecast2 2.4.0-beta.1</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>video/x-matroska</entry>
                        <entry>Matroska</entry>
                        <entry><emphasis>Any as per Matroska specification</emphasis></entry>
                        <entry>Icecast2 2.4.0-beta.1</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>video/x-matroska-3d</entry>
                        <entry>Matroska</entry>
                        <entry><emphasis>Any as per Matroska specification</emphasis></entry>
                        <entry>Icecast2 2.4.0-beta.1</entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>audio/mpeg</entry>
                        <entry>MP3</entry>
                        <entry><emphasis>ignored</emphasis></entry>
                        <entry>Icecast2 2.0.0</entry>
                        <entry>Handled as <emphasis>any other</emphasis> since Icecast2 2.2.0.</entry>
                    </row>
                    <row>
                        <entry><emphasis>any other</emphasis></entry>
                        <entry>MP3, AAC, NSV</entry>
                        <entry><emphasis>ignored</emphasis></entry>
                        <entry>Icecast2 2.2.0</entry>
                        <entry>Deprecated. Handled using a generic format handler.</entry>
                    </row>
                </tbody>
            </table>
            <table>
                <title>Codecs</title>
                <thead>
                    <row>
                        <entry>Codec</entry>
                        <entry>Containers</entry>
                        <entry>min. Icecast2 version</entry>
                        <entry>Comment</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Vorbis</entry>
                        <entry>Ogg, WebM, Matroska</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Opus</entry>
                        <entry>Ogg, WebM, Matroska</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>FLAC</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Speex</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry>Deprecated.</entry>
                    </row>
                    <row>
                        <entry>MIDI</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Theora</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Kate</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry>Skeleton</entry>
                        <entry>Ogg</entry>
                        <entry></entry>
                        <entry></entry>
                    </row>
                    <row>
                        <entry><emphasis>any other</emphasis></entry>
                        <entry>WebM, Matroska</entry>
                        <entry></entry>
                        <entry>Supported as per container specification.</entry>
                    </row>
                </tbody>
            </table>
        </section>
    </chapter>
    <chapter>
        <title>Ingesting Source Streams to Icecast2</title>
        <para>Ingesting source streams to Icecast2 is implemented by sending a HTTP PUT to the mountpoint of the given stream. The server will then try to create the stream automatically based on the provided data and it's configuration.</para>
        <note>HTTP PUT was implemented in Icecast2 2.4.0-beta.2. Before that a custom extension was used using the HTTP method "SOURCE".</note>
        <section>
            <title>Protocol Specification</title>
            <section>
                <title>Overview</title>
                <para>Sending data to the server is done by:
                    <orderedlist>
                        <listitem><para>Optionally a TLS connection is established between client and server.</para></listitem>
                        <listitem><para>A PUT request is sent by the client without authentication data.</para></listitem>
                        <listitem><para>Optionally the server may refuse the request if authentication is required. The client then repeats the request with authentication data provided.</para></listitem>
                        <listitem><para>Optionally the server replies with a 100-continue message.</para></listitem>
                        <listitem><para>The client sends the stream in negotiated transfer encoding.</para></listitem>
                        <listitem><para>The server replies with a final 200-OK.</para></listitem>
                        <listitem><para>Client and server terminate the connection.</para></listitem>
                    </orderedlist>
                </para>
            </section>
            <section xml:id="S100continue">
                <title xml:id="S100continue.title">100-continue</title>
                <para>The client should ask the server to send a 100-continue reply. This allows the server to reject the stream cleanly in case there is any problem. Such problems could be e.g. mismatch of credentials or unsupported parameters. Then the 100-continue reply is requested the server may reply with a 100-continue. The client should wait a reasonable long time before starting to provide data if no reply has been received yet.</para>
                <para>The 100-continue reply is requested by adding the following header to the request header:</para>
                <programlisting>Expect: 100-continue</programlisting>
                <warning>Up to Icecast2 2.4.3 there is a bug that causes the TLS connection to be abnormally terminated when using 100-continue and TLS. This has been fixed in Icecast2 2.4.4 and 2.5.0-beta.2.</warning>
            </section>
        </section>

        <section>
            <title>Examples</title>
            <para>This section lists example communication with an Icecast2 server for sending source streams. Information in &lt;&gt; are comments or special data.</para>
            <note>This section is not part of the specification.</note>
            <section>
                <title>Successful communication with Authentication and 100-continue</title>
                <para>This example demonstrates a successful communication between a Icecast2 server and a client using Authentication and 100-continue.</para>
                <formalpara>
                    <title>Client to server: Initial request without authentication</title>
                    <para>The client sends an initial request to the server. The request does not contain any authentication data.
                        <programlisting><![CDATA[PUT /example1.ogg HTTP/1.1
Host: localhost:8000
User-Agent: IceS 2.0.2
Content-Type: application/ogg
ice-public: 0
ice-name: Example stream name
ice-genre: Example genre
ice-description: A short description of your stream
ice-audio-info: samplerate=48000;channels=2;quality=3%2e00
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: Initial response requesting authentication</title>
                    <para>The server replies to the server with status 401 "Authentication Required". This asks the client to authenticate and provides required information.
                        <programlisting><![CDATA[HTTP/1.0 401 Authentication Required
Server: Icecast 2.4.99.3
Connection: Keep-Alive
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Date: Fri, 13 Apr 2018 08:16:31 GMT
Content-Type: text/plain; charset=utf-8
WWW-Authenticate: Basic realm="Icecast2 Server"
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
Content-Length: 26
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Close to server: Repeated request with authentication</title>
                    <para>The client repeats it's request with authentication data as per request by the server.
                        <programlisting><![CDATA[PUT /example1.ogg HTTP/1.0
Host: localhost:8000
Expect: 100-continue
Authorization: Basic c291cmNlOmhhY2ttZQ== <Base64 of "source:hackme">
User-Agent: IceS 2.0.2
Content-Type: application/ogg
ice-public: 0
ice-name: Example stream name
ice-genre: Example genre
ice-description: A short description of your stream
ice-audio-info: samplerate=48000;channels=2;quality=3%2e00
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: 100-continue</title>
                    <para>The server replies with a 100-continue. The client can now assume that the request is likely to pass and can send the body.
                        <programlisting><![CDATA[HTTP/1.1 100 Continue
Server: Icecast 2.4.99.3
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Date: Fri, 13 Apr 2018 08:31:25 GMT
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Client to server: Client sends data</title>
                    <para>The client sends the stream data as body of it's second PUT request.
                        <programlisting><![CDATA[<data>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: Final response to client</title>
                    <para>After the client finished the server acknowledges the request and data by returning a final 200-OK response.
                        <programlisting><![CDATA[HTTP/1.0 200 OK
Server: Icecast 2.4.99.3
Connection: Close
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Date: Fri, 13 Apr 2018 08:31:25 GMT
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
<blank line>]]></programlisting>
                    </para>
                </formalpara>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Accessing a Icecast2 stream as listener</title>
        <para>Listener clients (audio and video) request streams by using HTTP GET.</para>
        <section>
            <title>Protocol Specification</title>
            <para>Listener clients request the corresponding stream using HTTP GET. Clients should send a HTTP/1.1 request. Icecast2 will respond with the stream if the request is successful or corresponding error code if not. Icecast2 may also require the client to authenticate before allowing access.</para>
        </section>

        <section>
            <title>Examples</title>
            <section>
                <title>Successful communication without Authentication</title>
                <para>This example demonstrates a successful communication between a Icecast2 server and a client.</para>
                <formalpara>
                    <title>Client to server: Client requests the stream</title>
                    <para>The client sends it request for the given stream.
                        <programlisting><![CDATA[GET /example1.ogg HTTP/1.1
Host: localhost:8000
User-Agent: Wget/1.16 (linux-gnu)
Accept: */*
Connection: Keep-Alive
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: Response to client</title>
                    <para>The server does have the corresponding resource and allows access. Therefore it sends 200-OK and the content of the stream.
                        <programlisting><![CDATA[HTTP/1.0 200 OK
Server: Icecast 2.4.99.3
Connection: Close
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Date: Wed, 18 Apr 2018 10:10:54 GMT
Content-Type: application/ogg
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
ice-audio-info: samplerate=0;channels=0;quality=3%2e00
icy-description:A short description of your stream
icy-genre:Example genre
icy-name:Example stream name
icy-pub:0
<blank line>
<data>]]></programlisting>
                    </para>
                </formalpara>
            </section>
            <section>
                <title>Successful communication with Authentication</title>
                <para>This example demonstrates a successful communication between a Icecast2 server and a client. Authorization is used.</para>
                <formalpara>
                    <title>Client to server: The client requests the stream with no authentication</title>
                    <para>The client sends the request for the stream without authentication data provided.
                        <programlisting><![CDATA[GET /example1.ogg HTTP/1.1
Host: localhost:8000
User-Agent: Wget/1.16 (linux-gnu)
Accept: */*
Connection: Keep-Alive
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: Refusal of the request by the server</title>
                    <para>The server informs the client that the given resource requires authentication. It also provides the required information for that.
                        <programlisting><![CDATA[
HTTP/1.0 401 Authentication Required
Server: Icecast 2.4.99.3
Connection: Keep-Alive
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Upgrade: TLS/1.0
Date: Wed, 18 Apr 2018 12:08:30 GMT
Content-Type: text/plain; charset=utf-8
WWW-Authenticate: Basic realm="Icecast2 Server"
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
Content-Length: 26
<blank line>
You need to authenticate]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Client to server: The client resends the request with authentication</title>
                    <para>The client retries the request based on the provided information. It includes the authentication data as requested by the server.
                        <programlisting><![CDATA[GET /example1.ogg HTTP/1.1
Host: localhost:8000
User-Agent: Wget/1.16 (linux-gnu)
Accept: */*
Connection: Keep-Alive
Authorization: Basic bGlzdGVuZXI6aGFja21l <Base64 of "listener:hackme">
<blank line>]]></programlisting>
                    </para>
                </formalpara>
                <formalpara>
                    <title>Server to client: Final response to client</title>
                    <para>The server responds with the stream mounted on the provided resource.
                        <programlisting><![CDATA[HTTP/1.0 200 OK
Server: Icecast 2.4.99.3
Connection: Close
Accept-Encoding: identity, chunked
Allow: GET, PUT, SOURCE
Upgrade: TLS/1.0
Date: Wed, 18 Apr 2018 12:08:30 GMT
Content-Type: application/ogg
Cache-Control: no-cache
Expires: Mon, 26 Jul 1997 05:00:00 GMT
Pragma: no-cache
Access-Control-Allow-Origin: *
ice-audio-info: samplerate=0;channels=0;quality=3%2e00
icy-description:A short description of your stream
icy-genre:Example genre
icy-name:Example stream name
icy-pub:0
<blank line>
<data>]]></programlisting>
                    </para>
                </formalpara>
            </section>
        </section>
    </chapter>
    <chapter>
        <title>Accessing administration interface and API</title>
    </chapter>
    <chapter>
        <title>Tested and Certified Source Clients</title>
    </chapter>

    <appendix>
        <title>ICY Protocol</title>
        <warning>This Appendix is informational only. It is not part of the specification.</warning>
        <para>The ICY source protocol is must not be used. The ICY listener protocol is however used for metadata transfer from Icecast2 to listeners for non-supported streaming formats such as MP3 and AAC. Those formats lack native support for metadata. Sources providing such formats to Icecast2 must use the described protocol using HTTP PUT. In addition they can use the corresponding API endpoint for metadata updates.</para>

        <section>
            <title>ICY listener protocol</title>
            <para>The ICY protocol is a protocol very similar to HTTP. Yet it is different protocol, not a HTTP dialect. ICY implements multiplexing actual data with metadata. To activate the ICY mode clients must pass the header <parameter>Icy-MetaData</parameter> set to <constant>1</constant> in the request. Icecast2 may reply with an ICY response including a <parameter>icy-metaint</parameter> header. If such a header is detected the client must switch to ICY mode. The response must not be interpreted as HTTP.</para>
            <para>In ICY mode Icecast2 will send a block of metadata every <parameter>icy-metaint</parameter> bytes of payload. The metadata frame consists of a length byte and the metadata string. The length byte is the first byte in the frame. The frame length is 16 times the value of the length byte not including the length byte itself. The remainder of the frame is the frame is the metadata string. The is application specific. However it is common that the string is in format <code>Key0='Value0';Key1='Value1';[...]</code>. Common keys are <parameter>StreamTitle</parameter> and <parameter>StreamUrl</parameter> defining the current title, and URL for the stream. The frame is 0-byte-padded. If metadata is not to be updated a frame with the length byte of 0 is generated.</para>
        </section>

        <section>
            <title>Metadata updates using API</title>
            <warning>This must not be used for streaming formats supporting metadata.</warning>
            <para>In order to update metadata for an ICY stream you must call the API endpoint <function>metadata</function>. The parameter <parameter>mount</parameter> must be set to the corresponding mount point. The parameter <parameter>mode</parameter> is set to the constant <constant>updinfo</constant>. The actual metadata are transported using the parameter <parameter>song</parameter>.</para>
            <formalpara>
                <title>Example URI</title>
                <programlisting><![CDATA[https://icecast.example.org:8000/admin/metadata?mount=/mystream.mp3&mode=updinfo&song=My+Song+Title]]></programlisting>
            </formalpara>
        </section>
    </appendix>
</book>
